/* Generated by JTB 1.4.9 */
package parser.visitor;

import parser.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first order.<br>
 * In your "VoidArgu" visitors extend this class and override part or all of these methods.
 *
 * @param <A> - The user argument type
 */
public class DepthFirstVoidArguVisitor<A> implements IVoidArguVisitor<A> {


  /*
   * Base nodes classes visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link NodeChoice} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeChoice n, final A argu) {
    n.choice.accept(this, argu);
    return;
  }

  /**
   * Visits a {@link NodeList} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeList n, final A argu) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this, argu);
    }
    return;
  }

  /**
   * Visits a {@link NodeListOptional} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeListOptional n, final A argu) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this, argu);
        }
      return;
    } else
      return;
  }

  /**
   * Visits a {@link NodeOptional} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeOptional n, final A argu) {
    if (n.present()) {
      n.node.accept(this, argu);
      return;
    } else
      return;
  }

  /**
   * Visits a {@link NodeSequence} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeSequence n, final A argu) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this, argu);
    }
    return;
  }

  /**
   * Visits a {@link NodeTCF} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeTCF n, @SuppressWarnings("unused") final A argu) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  /**
   * Visits a {@link NodeToken} node.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final NodeToken n, @SuppressWarnings("unused") final A argu) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  /*
   * User grammar generated visit methods (to be overridden if necessary)
   */

  /**
   * Visits a {@link Start} node, whose children are the following :
   * <p>
   * f0 -> Expression()<br>
   * f1 -> ";"<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final Start n, final A argu) {
    // f0 -> Expression()
    final Expression n0 = n.f0;
    n0.accept(this, argu);
    // f1 -> ";"
    final NodeToken n1 = n.f1;
    n1.accept(this, argu);
  }

  /**
   * Visits a {@link Expression} node, whose child is the following :
   * <p>
   * f0 -> AdditiveExpression()<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final Expression n, final A argu) {
    // f0 -> AdditiveExpression()
    final AdditiveExpression n0 = n.f0;
    n0.accept(this, argu);
  }

  /**
   * Visits a {@link AdditiveExpression} node, whose children are the following :
   * <p>
   * f0 -> MultiplicativeExpression()<br>
   * f1 -> ( #0 ( %0 "+"<br>
   * .. .. . .. | %1 "-" )<br>
   * .. .. . #1 MultiplicativeExpression() )*<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final AdditiveExpression n, final A argu) {
    // f0 -> MultiplicativeExpression()
    final MultiplicativeExpression n0 = n.f0;
    n0.accept(this, argu);
    // f1 -> ( #0 ( %0 "+"
    // .. .. . .. | %1 "-" )
    // .. .. . #1 MultiplicativeExpression() )*
    final NodeListOptional n1 = n.f1;
    if (n1.present()) {
      for (int i = 0; i < n1.size(); i++) {
        final INode nloeai = n1.elementAt(i);
        final NodeSequence seq = (NodeSequence) nloeai;
        // #0 ( %0 "+"
        // .. | %1 "-" )
        final INode seq1 = seq.elementAt(0);
        final NodeChoice nch = (NodeChoice) seq1;
        final INode ich = nch.choice;
        switch (nch.which) {
          case 0:
            // %0 "+"
            ich.accept(this, argu);
            break;
          case 1:
            // %1 "-"
            ich.accept(this, argu);
            break;
          default:
            // should not occur !!!
            break;
        }
        // #1 MultiplicativeExpression()
        final INode seq2 = seq.elementAt(1);
        seq2.accept(this, argu);
      }
    }
  }

  /**
   * Visits a {@link MultiplicativeExpression} node, whose children are the following :
   * <p>
   * f0 -> UnaryExpression()<br>
   * f1 -> ( #0 ( %0 "*"<br>
   * .. .. . .. | %1 "/"<br>
   * .. .. . .. | %2 "%" )<br>
   * .. .. . #1 UnaryExpression() )*<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final MultiplicativeExpression n, final A argu) {
    // f0 -> UnaryExpression()
    final UnaryExpression n0 = n.f0;
    n0.accept(this, argu);
    // f1 -> ( #0 ( %0 "*"
    // .. .. . .. | %1 "/"
    // .. .. . .. | %2 "%" )
    // .. .. . #1 UnaryExpression() )*
    final NodeListOptional n1 = n.f1;
    if (n1.present()) {
      for (int i = 0; i < n1.size(); i++) {
        final INode nloeai = n1.elementAt(i);
        final NodeSequence seq = (NodeSequence) nloeai;
        // #0 ( %0 "*"
        // .. | %1 "/"
        // .. | %2 "%" )
        final INode seq1 = seq.elementAt(0);
        final NodeChoice nch = (NodeChoice) seq1;
        final INode ich = nch.choice;
        switch (nch.which) {
          case 0:
            // %0 "*"
            ich.accept(this, argu);
            break;
          case 1:
            // %1 "/"
            ich.accept(this, argu);
            break;
          case 2:
            // %2 "%"
            ich.accept(this, argu);
            break;
          default:
            // should not occur !!!
            break;
        }
        // #1 UnaryExpression()
        final INode seq2 = seq.elementAt(1);
        seq2.accept(this, argu);
      }
    }
  }

  /**
   * Visits a {@link UnaryExpression} node, whose child is the following :
   * <p>
   * f0 -> . %0 #0 "(" #1 Expression() #2 ")"<br>
   * .. .. | %1 Identifier()<br>
   * .. .. | %2 MyInteger()<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final UnaryExpression n, final A argu) {
    // f0 -> . %0 #0 "(" #1 Expression() #2 ")"
    // .. .. | %1 Identifier()
    // .. .. | %2 MyInteger()
    final NodeChoice nch = n.f0;
    final INode ich = nch.choice;
    switch (nch.which) {
      case 0:
        // %0 #0 "(" #1 Expression() #2 ")"
        final NodeSequence seq = (NodeSequence) ich;
        // #0 "("
        final INode seq1 = seq.elementAt(0);
        seq1.accept(this, argu);
        // #1 Expression()
        final INode seq2 = seq.elementAt(1);
        seq2.accept(this, argu);
        // #2 ")"
        final INode seq3 = seq.elementAt(2);
        seq3.accept(this, argu);
        break;
      case 1:
        // %1 Identifier()
        ich.accept(this, argu);
        break;
      case 2:
        // %2 MyInteger()
        ich.accept(this, argu);
        break;
      default:
        // should not occur !!!
        break;
    }
  }

  /**
   * Visits a {@link Identifier} node, whose child is the following :
   * <p>
   * f0 -> <IDENTIFIER><br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final Identifier n, final A argu) {
    // f0 -> <IDENTIFIER>
    final NodeToken n0 = n.f0;
    n0.accept(this, argu);
  }

  /**
   * Visits a {@link MyInteger} node, whose child is the following :
   * <p>
   * f0 -> <INTEGER_LITERAL><br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  @Override
  public void visit(final MyInteger n, final A argu) {
    // f0 -> <INTEGER_LITERAL>
    final NodeToken n0 = n.f0;
    n0.accept(this, argu);
  }

}
